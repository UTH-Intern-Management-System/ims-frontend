// Mock Email/SMS Service for IMS
class EmailSmsService {
  constructor() {
    this.emailQueue = [];
    this.smsQueue = [];
    this.sentEmails = [];
    this.sentSms = [];
    this.templates = this.initializeTemplates();
    this.isProcessing = false;
  }

  // Initialize email/SMS templates
  initializeTemplates() {
    return {
      email: {
        interview_scheduled: {
          subject: 'L·ªãch ph·ªèng v·∫•n th·ª±c t·∫≠p - {companyName}',
          body: `
            Xin ch√†o {candidateName},
            
            Ch√∫ng t√¥i r·∫•t vui m·ª´ng th√¥ng b√°o r·∫±ng b·∫°n ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch ph·ªèng v·∫•n cho v·ªã tr√≠ th·ª±c t·∫≠p t·∫°i {companyName}.
            
            Th√¥ng tin chi ti·∫øt:
            - Th·ªùi gian: {interviewDate} l√∫c {interviewTime}
            - ƒê·ªãa ƒëi·ªÉm: {location}
            - Ng∆∞·ªùi ph·ªèng v·∫•n: {interviewer}
            - H√¨nh th·ª©c: {format}
            
            Vui l√≤ng x√°c nh·∫≠n tham d·ª± v√† chu·∫©n b·ªã c√°c t√†i li·ªáu c·∫ßn thi·∫øt.
            
            Tr√¢n tr·ªçng,
            ƒê·ªôi ng≈© HR {companyName}
          `
        },
        intern_accepted: {
          subject: 'Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë∆∞·ª£c nh·∫≠n v√†o ch∆∞∆°ng tr√¨nh th·ª±c t·∫≠p',
          body: `
            Xin ch√†o {internName},
            
            Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë∆∞·ª£c ch√≠nh th·ª©c nh·∫≠n v√†o ch∆∞∆°ng tr√¨nh th·ª±c t·∫≠p t·∫°i {companyName}.
            
            Th√¥ng tin b·∫Øt ƒë·∫ßu:
            - Ng√†y b·∫Øt ƒë·∫ßu: {startDate}
            - Ph√≤ng ban: {department}
            - Mentor: {mentorName}
            - ƒê·ªãa ƒëi·ªÉm l√†m vi·ªác: {workLocation}
            
            Vui l√≤ng li√™n h·ªá v·ªõi HR ƒë·ªÉ ho√†n t·∫•t th·ªß t·ª•c.
            
            Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ƒë·∫°i gia ƒë√¨nh {companyName}!
          `
        },
        task_assigned: {
          subject: 'Nhi·ªám v·ª• m·ªõi ƒë∆∞·ª£c giao - {taskTitle}',
          body: `
            Xin ch√†o {internName},
            
            B·∫°n ƒë√£ ƒë∆∞·ª£c giao m·ªôt nhi·ªám v·ª• m·ªõi:
            
            Ti√™u ƒë·ªÅ: {taskTitle}
            M√¥ t·∫£: {taskDescription}
            H·∫°n ch√≥t: {dueDate}
            ƒê·ªô ∆∞u ti√™n: {priority}
            
            Vui l√≤ng truy c·∫≠p h·ªá th·ªëng ƒë·ªÉ xem chi ti·∫øt v√† c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô.
            
            Ch√∫c b·∫°n ho√†n th√†nh t·ªët!
          `
        },
        assessment_reminder: {
          subject: 'Nh·∫Øc nh·ªü: ƒê√°nh gi√° k·ªπ nƒÉng ƒë·ªãnh k·ª≥',
          body: `
            Xin ch√†o {internName},
            
            ƒê√¢y l√† l·ªùi nh·∫Øc nh·ªü v·ªÅ bu·ªïi ƒë√°nh gi√° k·ªπ nƒÉng ƒë·ªãnh k·ª≥:
            
            - Th·ªùi gian: {assessmentDate}
            - Mentor ƒë√°nh gi√°: {mentorName}
            - K·ªπ nƒÉng ƒë∆∞·ª£c ƒë√°nh gi√°: {skills}
            
            Vui l√≤ng chu·∫©n b·ªã v√† tham gia ƒë·∫ßy ƒë·ªß.
          `
        },
        feedback_request: {
          subject: 'Y√™u c·∫ßu ph·∫£n h·ªìi v·ªÅ ch∆∞∆°ng tr√¨nh th·ª±c t·∫≠p',
          body: `
            Xin ch√†o {internName},
            
            Ch√∫ng t√¥i mong mu·ªën nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi c·ªßa b·∫°n v·ªÅ:
            - Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o
            - S·ª± h·ªó tr·ª£ t·ª´ mentor
            - M√¥i tr∆∞·ªùng l√†m vi·ªác
            - ƒê·ªÅ xu·∫•t c·∫£i thi·ªán
            
            Vui l√≤ng truy c·∫≠p h·ªá th·ªëng ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi.
            
            C·∫£m ∆°n b·∫°n!
          `
        }
      },
      sms: {
        interview_reminder: 'Nh·∫Øc nh·ªü: Ph·ªèng v·∫•n th·ª±c t·∫≠p ng√†y mai l√∫c {time} t·∫°i {location}. Vui l√≤ng ƒë·∫øn ƒë√∫ng gi·ªù. - {companyName}',
        task_deadline: 'Nh·∫Øc nh·ªü: Nhi·ªám v·ª• "{taskTitle}" s·∫Ω h·∫øt h·∫°n trong {hours} gi·ªù. Vui l√≤ng ho√†n th√†nh. - {companyName}',
        assessment_today: 'H√¥m nay b·∫°n c√≥ bu·ªïi ƒë√°nh gi√° k·ªπ nƒÉng l√∫c {time} v·ªõi {mentorName}. Ch√∫c b·∫°n th√†nh c√¥ng! - {companyName}',
        welcome_intern: 'Ch√†o m·ª´ng {internName} ƒë·∫øn v·ªõi {companyName}! Ng√†y ƒë·∫ßu ti√™n: {startDate}. Ch√∫c b·∫°n c√≥ tr·∫£i nghi·ªám tuy·ªát v·ªùi!',
        urgent_notification: 'Th√¥ng b√°o kh·∫©n: {message}. Vui l√≤ng ki·ªÉm tra h·ªá th·ªëng ngay. - {companyName}'
      }
    };
  }

  // Send email
  async sendEmail(to, templateKey, variables = {}, options = {}) {
    const template = this.templates.email[templateKey];
    if (!template) {
      throw new Error(`Email template '${templateKey}' not found`);
    }

    const email = {
      id: `email_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      to,
      subject: this.replaceVariables(template.subject, variables),
      body: this.replaceVariables(template.body, variables),
      templateKey,
      variables,
      priority: options.priority || 'normal',
      scheduledAt: options.scheduledAt || new Date().toISOString(),
      status: 'queued',
      attempts: 0,
      createdAt: new Date().toISOString()
    };

    this.emailQueue.push(email);
    console.log(`Email queued: ${email.subject} to ${to}`);

    // Process queue if not already processing
    if (!this.isProcessing) {
      this.processQueue();
    }

    return email.id;
  }

  // Send SMS
  async sendSms(to, templateKey, variables = {}, options = {}) {
    const template = this.templates.sms[templateKey];
    if (!template) {
      throw new Error(`SMS template '${templateKey}' not found`);
    }

    const sms = {
      id: `sms_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      to,
      message: this.replaceVariables(template, variables),
      templateKey,
      variables,
      priority: options.priority || 'normal',
      scheduledAt: options.scheduledAt || new Date().toISOString(),
      status: 'queued',
      attempts: 0,
      createdAt: new Date().toISOString()
    };

    this.smsQueue.push(sms);
    console.log(`SMS queued: ${sms.message.substring(0, 50)}... to ${to}`);

    // Process queue if not already processing
    if (!this.isProcessing) {
      this.processQueue();
    }

    return sms.id;
  }

  // Replace template variables
  replaceVariables(template, variables) {
    let result = template;
    Object.keys(variables).forEach(key => {
      const regex = new RegExp(`{${key}}`, 'g');
      result = result.replace(regex, variables[key] || '');
    });
    return result;
  }

  // Process email/SMS queue
  async processQueue() {
    if (this.isProcessing) return;
    
    this.isProcessing = true;

    try {
      // Process emails
      while (this.emailQueue.length > 0) {
        const email = this.emailQueue.shift();
        await this.simulateEmailSending(email);
      }

      // Process SMS
      while (this.smsQueue.length > 0) {
        const sms = this.smsQueue.shift();
        await this.simulateSmsSending(sms);
      }
    } finally {
      this.isProcessing = false;
    }
  }

  // Simulate email sending
  async simulateEmailSending(email) {
    return new Promise((resolve) => {
      // Simulate network delay
      const delay = Math.random() * 2000 + 500; // 0.5-2.5 seconds
      
      setTimeout(() => {
        // Simulate success/failure (95% success rate)
        const success = Math.random() > 0.05;
        
        if (success) {
          email.status = 'sent';
          email.sentAt = new Date().toISOString();
          email.attempts++;
          
          this.sentEmails.push(email);
          console.log(`‚úÖ Email sent successfully: ${email.subject}`);
          
          // Simulate email delivery confirmation after delay
          setTimeout(() => {
            email.status = 'delivered';
            email.deliveredAt = new Date().toISOString();
            console.log(`üìß Email delivered: ${email.subject}`);
          }, Math.random() * 5000 + 1000);
          
        } else {
          email.status = 'failed';
          email.failedAt = new Date().toISOString();
          email.attempts++;
          email.error = 'Simulated delivery failure';
          
          console.log(`‚ùå Email failed: ${email.subject}`);
          
          // Retry logic for failed emails
          if (email.attempts < 3) {
            email.status = 'retrying';
            setTimeout(() => {
              this.emailQueue.unshift(email); // Add back to front of queue
              if (!this.isProcessing) {
                this.processQueue();
              }
            }, 5000); // Retry after 5 seconds
          }
        }
        
        resolve(email);
      }, delay);
    });
  }

  // Simulate SMS sending
  async simulateSmsSending(sms) {
    return new Promise((resolve) => {
      // Simulate network delay
      const delay = Math.random() * 1500 + 300; // 0.3-1.8 seconds
      
      setTimeout(() => {
        // Simulate success/failure (90% success rate)
        const success = Math.random() > 0.1;
        
        if (success) {
          sms.status = 'sent';
          sms.sentAt = new Date().toISOString();
          sms.attempts++;
          
          this.sentSms.push(sms);
          console.log(`‚úÖ SMS sent successfully to ${sms.to}`);
          
          // Simulate SMS delivery confirmation
          setTimeout(() => {
            sms.status = 'delivered';
            sms.deliveredAt = new Date().toISOString();
            console.log(`üì± SMS delivered to ${sms.to}`);
          }, Math.random() * 3000 + 500);
          
        } else {
          sms.status = 'failed';
          sms.failedAt = new Date().toISOString();
          sms.attempts++;
          sms.error = 'Simulated delivery failure';
          
          console.log(`‚ùå SMS failed to ${sms.to}`);
          
          // Retry logic for failed SMS
          if (sms.attempts < 3) {
            sms.status = 'retrying';
            setTimeout(() => {
              this.smsQueue.unshift(sms); // Add back to front of queue
              if (!this.isProcessing) {
                this.processQueue();
              }
            }, 3000); // Retry after 3 seconds
          }
        }
        
        resolve(sms);
      }, delay);
    });
  }

  // Get email/SMS history
  getEmailHistory(limit = 50) {
    return this.sentEmails
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
      .slice(0, limit);
  }

  getSmsHistory(limit = 50) {
    return this.sentSms
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
      .slice(0, limit);
  }

  // Get queue status
  getQueueStatus() {
    return {
      emailQueue: this.emailQueue.length,
      smsQueue: this.smsQueue.length,
      isProcessing: this.isProcessing,
      totalEmailsSent: this.sentEmails.length,
      totalSmsSent: this.sentSms.length
    };
  }

  // Bulk send emails
  async sendBulkEmails(recipients, templateKey, variables = {}, options = {}) {
    const emailIds = [];
    
    for (const recipient of recipients) {
      const emailId = await this.sendEmail(
        recipient.email, 
        templateKey, 
        { ...variables, ...recipient.variables }, 
        options
      );
      emailIds.push(emailId);
    }
    
    return emailIds;
  }

  // Schedule email/SMS for later
  scheduleEmail(to, templateKey, variables, scheduledAt) {
    return this.sendEmail(to, templateKey, variables, { scheduledAt });
  }

  scheduleSms(to, templateKey, variables, scheduledAt) {
    return this.sendSms(to, templateKey, variables, { scheduledAt });
  }
}

// Create singleton instance
const emailSmsService = new EmailSmsService();

export default emailSmsService;
